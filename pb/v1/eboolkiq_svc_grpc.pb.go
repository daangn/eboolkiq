// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	pb "github.com/daangn/eboolkiq/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EboolkiqSvcClient is the client API for EboolkiqSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EboolkiqSvcClient interface {
	// CreateQueue creates a queue on the eboolkiq server.
	CreateQueue(ctx context.Context, in *CreateQueueReq, opts ...grpc.CallOption) (*pb.Queue, error)
	// GetQueue gets queue from the eboolkiq server.
	GetQueue(ctx context.Context, in *GetQueueReq, opts ...grpc.CallOption) (*pb.Queue, error)
	// DeleteQueue deletes the queue on the eboolkiq server.
	DeleteQueue(ctx context.Context, in *DeleteQueueReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// FlushQueue deletes all tasks from the queue.
	FlushQueue(ctx context.Context, in *FlushQueueReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateTask creates a task in the queue.
	CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*pb.Task, error)
	// GetTask gets a task from the queue.
	GetTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*pb.Task, error)
	// FinishTask set task as finished.
	FinishTask(ctx context.Context, in *FinishTaskReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type eboolkiqSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewEboolkiqSvcClient(cc grpc.ClientConnInterface) EboolkiqSvcClient {
	return &eboolkiqSvcClient{cc}
}

func (c *eboolkiqSvcClient) CreateQueue(ctx context.Context, in *CreateQueueReq, opts ...grpc.CallOption) (*pb.Queue, error) {
	out := new(pb.Queue)
	err := c.cc.Invoke(ctx, "/daangn.eboolkiq.v1.EboolkiqSvc/CreateQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eboolkiqSvcClient) GetQueue(ctx context.Context, in *GetQueueReq, opts ...grpc.CallOption) (*pb.Queue, error) {
	out := new(pb.Queue)
	err := c.cc.Invoke(ctx, "/daangn.eboolkiq.v1.EboolkiqSvc/GetQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eboolkiqSvcClient) DeleteQueue(ctx context.Context, in *DeleteQueueReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/daangn.eboolkiq.v1.EboolkiqSvc/DeleteQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eboolkiqSvcClient) FlushQueue(ctx context.Context, in *FlushQueueReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/daangn.eboolkiq.v1.EboolkiqSvc/FlushQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eboolkiqSvcClient) CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*pb.Task, error) {
	out := new(pb.Task)
	err := c.cc.Invoke(ctx, "/daangn.eboolkiq.v1.EboolkiqSvc/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eboolkiqSvcClient) GetTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*pb.Task, error) {
	out := new(pb.Task)
	err := c.cc.Invoke(ctx, "/daangn.eboolkiq.v1.EboolkiqSvc/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eboolkiqSvcClient) FinishTask(ctx context.Context, in *FinishTaskReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/daangn.eboolkiq.v1.EboolkiqSvc/FinishTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EboolkiqSvcServer is the server API for EboolkiqSvc service.
// All implementations must embed UnimplementedEboolkiqSvcServer
// for forward compatibility
type EboolkiqSvcServer interface {
	// CreateQueue creates a queue on the eboolkiq server.
	CreateQueue(context.Context, *CreateQueueReq) (*pb.Queue, error)
	// GetQueue gets queue from the eboolkiq server.
	GetQueue(context.Context, *GetQueueReq) (*pb.Queue, error)
	// DeleteQueue deletes the queue on the eboolkiq server.
	DeleteQueue(context.Context, *DeleteQueueReq) (*emptypb.Empty, error)
	// FlushQueue deletes all tasks from the queue.
	FlushQueue(context.Context, *FlushQueueReq) (*emptypb.Empty, error)
	// CreateTask creates a task in the queue.
	CreateTask(context.Context, *CreateTaskReq) (*pb.Task, error)
	// GetTask gets a task from the queue.
	GetTask(context.Context, *GetTaskReq) (*pb.Task, error)
	// FinishTask set task as finished.
	FinishTask(context.Context, *FinishTaskReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedEboolkiqSvcServer()
}

// UnimplementedEboolkiqSvcServer must be embedded to have forward compatible implementations.
type UnimplementedEboolkiqSvcServer struct {
}

func (UnimplementedEboolkiqSvcServer) CreateQueue(context.Context, *CreateQueueReq) (*pb.Queue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedEboolkiqSvcServer) GetQueue(context.Context, *GetQueueReq) (*pb.Queue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueue not implemented")
}
func (UnimplementedEboolkiqSvcServer) DeleteQueue(context.Context, *DeleteQueueReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}
func (UnimplementedEboolkiqSvcServer) FlushQueue(context.Context, *FlushQueueReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushQueue not implemented")
}
func (UnimplementedEboolkiqSvcServer) CreateTask(context.Context, *CreateTaskReq) (*pb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedEboolkiqSvcServer) GetTask(context.Context, *GetTaskReq) (*pb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedEboolkiqSvcServer) FinishTask(context.Context, *FinishTaskReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishTask not implemented")
}
func (UnimplementedEboolkiqSvcServer) mustEmbedUnimplementedEboolkiqSvcServer() {}

// UnsafeEboolkiqSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EboolkiqSvcServer will
// result in compilation errors.
type UnsafeEboolkiqSvcServer interface {
	mustEmbedUnimplementedEboolkiqSvcServer()
}

func RegisterEboolkiqSvcServer(s grpc.ServiceRegistrar, srv EboolkiqSvcServer) {
	s.RegisterService(&EboolkiqSvc_ServiceDesc, srv)
}

func _EboolkiqSvc_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EboolkiqSvcServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daangn.eboolkiq.v1.EboolkiqSvc/CreateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EboolkiqSvcServer).CreateQueue(ctx, req.(*CreateQueueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EboolkiqSvc_GetQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EboolkiqSvcServer).GetQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daangn.eboolkiq.v1.EboolkiqSvc/GetQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EboolkiqSvcServer).GetQueue(ctx, req.(*GetQueueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EboolkiqSvc_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EboolkiqSvcServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daangn.eboolkiq.v1.EboolkiqSvc/DeleteQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EboolkiqSvcServer).DeleteQueue(ctx, req.(*DeleteQueueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EboolkiqSvc_FlushQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushQueueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EboolkiqSvcServer).FlushQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daangn.eboolkiq.v1.EboolkiqSvc/FlushQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EboolkiqSvcServer).FlushQueue(ctx, req.(*FlushQueueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EboolkiqSvc_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EboolkiqSvcServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daangn.eboolkiq.v1.EboolkiqSvc/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EboolkiqSvcServer).CreateTask(ctx, req.(*CreateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EboolkiqSvc_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EboolkiqSvcServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daangn.eboolkiq.v1.EboolkiqSvc/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EboolkiqSvcServer).GetTask(ctx, req.(*GetTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EboolkiqSvc_FinishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EboolkiqSvcServer).FinishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daangn.eboolkiq.v1.EboolkiqSvc/FinishTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EboolkiqSvcServer).FinishTask(ctx, req.(*FinishTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EboolkiqSvc_ServiceDesc is the grpc.ServiceDesc for EboolkiqSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EboolkiqSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daangn.eboolkiq.v1.EboolkiqSvc",
	HandlerType: (*EboolkiqSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQueue",
			Handler:    _EboolkiqSvc_CreateQueue_Handler,
		},
		{
			MethodName: "GetQueue",
			Handler:    _EboolkiqSvc_GetQueue_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _EboolkiqSvc_DeleteQueue_Handler,
		},
		{
			MethodName: "FlushQueue",
			Handler:    _EboolkiqSvc_FlushQueue_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _EboolkiqSvc_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _EboolkiqSvc_GetTask_Handler,
		},
		{
			MethodName: "FinishTask",
			Handler:    _EboolkiqSvc_FinishTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daangn/eboolkiq/v1/eboolkiq_svc.proto",
}
